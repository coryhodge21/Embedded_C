

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Mar 13 00:17:21 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14  0000                     
    15                           ; Version 2.05
    16                           ; Generated 20/12/2018 GMT
    17                           ; 
    18                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F4520 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     _TRISA	set	3986
    50  0000                     _LATD	set	3980
    51  0000                     _TRISD	set	3989
    52  0000                     _ADRESL	set	4035
    53  0000                     _ADRESH	set	4036
    54  0000                     _ADCON0	set	4034
    55  0000                     _ADCON2bits	set	4032
    56  0000                     _ADCON0bits	set	4034
    57  0000                     _LATD3	set	31843
    58  0000                     _LATD2	set	31842
    59  0000                     _LATD1	set	31841
    60  0000                     _LATD0	set	31840
    61  0000                     _RD0	set	31768
    62  0000                     _RD1	set	31769
    63  0000                     _RD5	set	31773
    64  0000                     _RD4	set	31772
    65  0000                     _RD3	set	31771
    66  0000                     _RD2	set	31770
    67                           
    68                           ; #config settings
    69  0000                     
    70                           	psect	cinit
    71  007E02                     __pcinit:
    72                           	opt callstack 0
    73  007E02                     start_initialization:
    74                           	opt callstack 0
    75  007E02                     __initialization:
    76                           	opt callstack 0
    77  007E02                     end_of_initialization:
    78                           	opt callstack 0
    79  007E02                     __end_of__initialization:
    80                           	opt callstack 0
    81  007E02  0E00               	movlw	low (__Lmediumconst shr (0+16))
    82  007E04  6EF8               	movwf	tblptru,c
    83  007E06  0100               	movlb	0
    84  007E08  EFAA  F03F         	goto	_main	;jump to C main() function
    85                           
    86                           	psect	cstackCOMRAM
    87  000001                     __pcstackCOMRAM:
    88                           	opt callstack 0
    89  000001                     ?___lwdiv:
    90                           	opt callstack 0
    91  000001                     ADC_Channel_Select@channel:
    92                           	opt callstack 0
    93  000001                     ___lwdiv@dividend:
    94                           	opt callstack 0
    95                           
    96                           ; 2 bytes @ 0x0
    97  000001                     	ds	2
    98  000003                     ??_ADC_Channel_Select:
    99  000003                     ___lwdiv@divisor:
   100                           	opt callstack 0
   101                           
   102                           ; 2 bytes @ 0x2
   103  000003                     	ds	2
   104  000005                     ___lwdiv@quotient:
   105                           	opt callstack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	2
   109  000007                     ___lwdiv@counter:
   110                           	opt callstack 0
   111                           
   112                           ; 1 bytes @ 0x6
   113  000007                     	ds	1
   114  000008                     ?_AD_Read:
   115                           	opt callstack 0
   116                           
   117                           ; 2 bytes @ 0x7
   118  000008                     	ds	2
   119  00000A                     ??_AD_Read:
   120                           
   121                           ; 1 bytes @ 0x9
   122  00000A                     	ds	2
   123  00000C                     AD_Read@full_16_bit_value:
   124                           	opt callstack 0
   125                           
   126                           ; 2 bytes @ 0xB
   127  00000C                     	ds	2
   128  00000E                     main@AD_Read_Count:
   129                           	opt callstack 0
   130                           
   131                           ; 2 bytes @ 0xD
   132  00000E                     	ds	2
   133  000010                     main@AD_Delay:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0xF
   137  000010                     	ds	2
   138  000012                     main@AD_Value:
   139                           	opt callstack 0
   140                           
   141                           ; 2 bytes @ 0x11
   142  000012                     	ds	2
   143                           
   144 ;;
   145 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   146 ;;
   147 ;; *************** function _main *****************
   148 ;; Defined at:
   149 ;;		line 217 in file "main.c"
   150 ;; Parameters:    Size  Location     Type
   151 ;;		None
   152 ;; Auto vars:     Size  Location     Type
   153 ;;  AD_Value        2   17[COMRAM] int 
   154 ;;  AD_Delay        2   15[COMRAM] unsigned int 
   155 ;;  AD_Read_Coun    2   13[COMRAM] unsigned int 
   156 ;; Return value:  Size  Location     Type
   157 ;;                  1    wreg      void 
   158 ;; Registers used:
   159 ;;		wreg, status,2, status,0, cstack
   160 ;; Tracked objects:
   161 ;;		On entry : 0/0
   162 ;;		On exit  : 0/0
   163 ;;		Unchanged: 0/0
   164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   165 ;;      Params:         0       0       0       0       0       0       0
   166 ;;      Locals:         6       0       0       0       0       0       0
   167 ;;      Temps:          0       0       0       0       0       0       0
   168 ;;      Totals:         6       0       0       0       0       0       0
   169 ;;Total ram usage:        6 bytes
   170 ;; Hardware stack levels required when called:    2
   171 ;; This function calls:
   172 ;;		_ADC_Channel_Select
   173 ;;		_ADC_Init
   174 ;;		_AD_Read
   175 ;; This function is called by:
   176 ;;		Startup code after reset
   177 ;; This function uses a non-reentrant model
   178 ;;
   179                           
   180                           	psect	text0
   181  007F54                     __ptext0:
   182                           	opt callstack 0
   183  007F54                     _main:
   184                           	opt callstack 29
   185                           
   186                           ;main.c: 220:     TRISD = 0x00;
   187                           
   188                           ;incstack = 0
   189  007F54  0E00               	movlw	0
   190  007F56  6E95               	movwf	3989,c	;volatile
   191                           
   192                           ;main.c: 221:     LATD = 0x00;
   193  007F58  0E00               	movlw	0
   194  007F5A  6E8C               	movwf	3980,c	;volatile
   195                           
   196                           ;main.c: 224:     TRISA = 0xFF;
   197  007F5C  6892               	setf	3986,c	;volatile
   198                           
   199                           ;main.c: 228:     ADC_Init();
   200  007F5E  EC06  F03F         	call	_ADC_Init	;wreg free
   201                           
   202                           ;main.c: 231:     ADC_Channel_Select(0);
   203  007F62  0E00               	movlw	0
   204  007F64  6E02               	movwf	ADC_Channel_Select@channel+1,c
   205  007F66  0E00               	movlw	0
   206  007F68  6E01               	movwf	ADC_Channel_Select@channel,c
   207  007F6A  EC54  F03F         	call	_ADC_Channel_Select	;wreg free
   208                           
   209                           ;main.c: 234:     unsigned int AD_Delay = 0;
   210  007F6E  0E00               	movlw	0
   211  007F70  6E11               	movwf	main@AD_Delay+1,c
   212  007F72  0E00               	movlw	0
   213  007F74  6E10               	movwf	main@AD_Delay,c
   214                           
   215                           ;main.c: 236:     unsigned int AD_Read_Count = 0;
   216  007F76  0E00               	movlw	0
   217  007F78  6E0F               	movwf	main@AD_Read_Count+1,c
   218  007F7A  0E00               	movlw	0
   219  007F7C  6E0E               	movwf	main@AD_Read_Count,c
   220  007F7E                     
   221                           ;main.c: 243:         if( AD_Delay == 1000 ){
   222                           
   223                           ;main.c: 241:     while(1){
   224  007F7E  0EE8               	movlw	232
   225  007F80  1810               	xorwf	main@AD_Delay,w,c
   226  007F82  E13B               	bnz	l1113
   227  007F84  0E03               	movlw	3
   228  007F86  1811               	xorwf	main@AD_Delay+1,w,c
   229  007F88  A4D8               	btfss	status,2,c
   230  007F8A  D037               	goto	l1113
   231                           
   232                           ;main.c: 245:             AD_Value = AD_Read();
   233  007F8C  EC0C  F03F         	call	_AD_Read	;wreg free
   234  007F90  C008  F012         	movff	?_AD_Read,main@AD_Value
   235  007F94  C009  F013         	movff	?_AD_Read+1,main@AD_Value+1
   236                           
   237                           ;main.c: 249:             if ( AD_Value <= 0 ){
   238  007F98  BE13               	btfsc	main@AD_Value+1,7,c
   239  007F9A  D005               	goto	u210
   240  007F9C  5013               	movf	main@AD_Value+1,w,c
   241  007F9E  E105               	bnz	l113
   242  007FA0  0412               	decf	main@AD_Value,w,c
   243  007FA2  B0D8               	btfsc	status,0,c
   244  007FA4  D002               	goto	l113
   245  007FA6                     u210:
   246                           
   247                           ;main.c: 251:                 LATD0 = 1;
   248  007FA6  808C               	bsf	3980,0,c	;volatile
   249                           
   250                           ;main.c: 252:             } else {
   251  007FA8  D001               	goto	l1097
   252  007FAA                     l113:
   253                           
   254                           ;main.c: 253:                 LATD0 = 0;
   255  007FAA  908C               	bcf	3980,0,c	;volatile
   256  007FAC                     l1097:
   257                           
   258                           ;main.c: 257:             if ( AD_Value > 1 ){
   259  007FAC  BE13               	btfsc	main@AD_Value+1,7,c
   260  007FAE  D008               	goto	l115
   261  007FB0  5013               	movf	main@AD_Value+1,w,c
   262  007FB2  E104               	bnz	u220
   263  007FB4  0E02               	movlw	2
   264  007FB6  5C12               	subwf	main@AD_Value,w,c
   265  007FB8  A0D8               	btfss	status,0,c
   266  007FBA  D002               	goto	l115
   267  007FBC                     u220:
   268                           
   269                           ;main.c: 258:                 LATD1 = 1;
   270  007FBC  828C               	bsf	3980,1,c	;volatile
   271                           
   272                           ;main.c: 259:             } else {
   273  007FBE  D001               	goto	l1101
   274  007FC0                     l115:
   275                           
   276                           ;main.c: 260:                 LATD1 = 0;
   277  007FC0  928C               	bcf	3980,1,c	;volatile
   278  007FC2                     l1101:
   279                           
   280                           ;main.c: 264:             if ( AD_Value > 7 ){
   281  007FC2  BE13               	btfsc	main@AD_Value+1,7,c
   282  007FC4  D008               	goto	l117
   283  007FC6  5013               	movf	main@AD_Value+1,w,c
   284  007FC8  E104               	bnz	u230
   285  007FCA  0E08               	movlw	8
   286  007FCC  5C12               	subwf	main@AD_Value,w,c
   287  007FCE  A0D8               	btfss	status,0,c
   288  007FD0  D002               	goto	l117
   289  007FD2                     u230:
   290                           
   291                           ;main.c: 265:                 LATD2 = 1;
   292  007FD2  848C               	bsf	3980,2,c	;volatile
   293                           
   294                           ;main.c: 266:             } else {
   295  007FD4  D001               	goto	l1105
   296  007FD6                     l117:
   297                           
   298                           ;main.c: 267:                 LATD2 = 0;
   299  007FD6  948C               	bcf	3980,2,c	;volatile
   300  007FD8                     l1105:
   301                           
   302                           ;main.c: 271:             if ( AD_Value > 8 ){
   303  007FD8  BE13               	btfsc	main@AD_Value+1,7,c
   304  007FDA  D008               	goto	l119
   305  007FDC  5013               	movf	main@AD_Value+1,w,c
   306  007FDE  E104               	bnz	u240
   307  007FE0  0E09               	movlw	9
   308  007FE2  5C12               	subwf	main@AD_Value,w,c
   309  007FE4  A0D8               	btfss	status,0,c
   310  007FE6  D002               	goto	l119
   311  007FE8                     u240:
   312                           
   313                           ;main.c: 272:                 LATD3 = 1;
   314  007FE8  868C               	bsf	3980,3,c	;volatile
   315                           
   316                           ;main.c: 273:             } else {
   317  007FEA  D001               	goto	l1109
   318  007FEC                     l119:
   319                           
   320                           ;main.c: 274:                 LATD3 = 0;
   321  007FEC  968C               	bcf	3980,3,c	;volatile
   322  007FEE                     l1109:
   323                           
   324                           ;main.c: 279:             AD_Delay = 0;
   325  007FEE  0E00               	movlw	0
   326  007FF0  6E11               	movwf	main@AD_Delay+1,c
   327  007FF2  0E00               	movlw	0
   328  007FF4  6E10               	movwf	main@AD_Delay,c
   329                           
   330                           ;main.c: 281:             AD_Read_Count++;
   331  007FF6  4A0E               	infsnz	main@AD_Read_Count,f,c
   332  007FF8  2A0F               	incf	main@AD_Read_Count+1,f,c
   333  007FFA                     l1113:
   334                           
   335                           ;main.c: 286:         AD_Delay++;
   336  007FFA  4A10               	infsnz	main@AD_Delay,f,c
   337  007FFC  2A11               	incf	main@AD_Delay+1,f,c
   338  007FFE  D7BF               	goto	l1089
   339  008000                     __end_of_main:
   340                           	opt callstack 0
   341                           
   342 ;; *************** function _AD_Read *****************
   343 ;; Defined at:
   344 ;;		line 189 in file "main.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;  full_16_bit_    2   11[COMRAM] unsigned int 
   349 ;; Return value:  Size  Location     Type
   350 ;;                  2    7[COMRAM] unsigned int 
   351 ;; Registers used:
   352 ;;		wreg, status,2, status,0, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : 0/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   358 ;;      Params:         2       0       0       0       0       0       0
   359 ;;      Locals:         2       0       0       0       0       0       0
   360 ;;      Temps:          2       0       0       0       0       0       0
   361 ;;      Totals:         6       0       0       0       0       0       0
   362 ;;Total ram usage:        6 bytes
   363 ;; Hardware stack levels used:    1
   364 ;; Hardware stack levels required when called:    1
   365 ;; This function calls:
   366 ;;		___lwdiv
   367 ;; This function is called by:
   368 ;;		_main
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text1
   373  007E18                     __ptext1:
   374                           	opt callstack 0
   375  007E18                     _AD_Read:
   376                           	opt callstack 29
   377                           
   378                           ;main.c: 192:     ADCON0bits.GO_nDONE = 1;
   379                           
   380                           ;incstack = 0
   381  007E18  82C2               	bsf	4034,1,c	;volatile
   382  007E1A                     l103:
   383  007E1A  B2C2               	btfsc	4034,1,c	;volatile
   384  007E1C  D7FE               	goto	l103
   385                           
   386                           ;main.c: 202:     unsigned int full_16_bit_value = (ADRESH<<8) + ADRESL;
   387  007E1E  50C4               	movf	4036,w,c	;volatile
   388  007E20  6E0B               	movwf	(??_AD_Read+1)& (0+255),c
   389  007E22  6A0A               	clrf	??_AD_Read& (0+255),c
   390  007E24  50C3               	movf	4035,w,c	;volatile
   391  007E26  240A               	addwf	??_AD_Read,w,c
   392  007E28  6E0C               	movwf	AD_Read@full_16_bit_value,c
   393  007E2A  0E00               	movlw	0
   394  007E2C  200B               	addwfc	??_AD_Read+1,w,c
   395  007E2E  6E0D               	movwf	AD_Read@full_16_bit_value+1,c
   396                           
   397                           ;main.c: 205:     full_16_bit_value /= 100;
   398  007E30  C00C  F001         	movff	AD_Read@full_16_bit_value,___lwdiv@dividend
   399  007E34  C00D  F002         	movff	AD_Read@full_16_bit_value+1,___lwdiv@dividend+1
   400  007E38  0E00               	movlw	0
   401  007E3A  6E04               	movwf	___lwdiv@divisor+1,c
   402  007E3C  0E64               	movlw	100
   403  007E3E  6E03               	movwf	___lwdiv@divisor,c
   404  007E40  EC2B  F03F         	call	___lwdiv	;wreg free
   405  007E44  C001  F00C         	movff	?___lwdiv,AD_Read@full_16_bit_value
   406  007E48  C002  F00D         	movff	?___lwdiv+1,AD_Read@full_16_bit_value+1
   407                           
   408                           ;main.c: 207:     return full_16_bit_value;
   409  007E4C  C00C  F008         	movff	AD_Read@full_16_bit_value,?_AD_Read
   410  007E50  C00D  F009         	movff	AD_Read@full_16_bit_value+1,?_AD_Read+1
   411  007E54  0012               	return		;funcret
   412  007E56                     __end_of_AD_Read:
   413                           	opt callstack 0
   414                           
   415 ;; *************** function ___lwdiv *****************
   416 ;; Defined at:
   417 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/lwdiv.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;  dividend        2    0[COMRAM] unsigned int 
   420 ;;  divisor         2    2[COMRAM] unsigned int 
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  quotient        2    4[COMRAM] unsigned int 
   423 ;;  counter         1    6[COMRAM] unsigned char 
   424 ;; Return value:  Size  Location     Type
   425 ;;                  2    0[COMRAM] unsigned int 
   426 ;; Registers used:
   427 ;;		wreg, status,2, status,0
   428 ;; Tracked objects:
   429 ;;		On entry : 0/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   433 ;;      Params:         4       0       0       0       0       0       0
   434 ;;      Locals:         3       0       0       0       0       0       0
   435 ;;      Temps:          0       0       0       0       0       0       0
   436 ;;      Totals:         7       0       0       0       0       0       0
   437 ;;Total ram usage:        7 bytes
   438 ;; Hardware stack levels used:    1
   439 ;; This function calls:
   440 ;;		Nothing
   441 ;; This function is called by:
   442 ;;		_AD_Read
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           	psect	text2
   447  007E56                     __ptext2:
   448                           	opt callstack 0
   449  007E56                     ___lwdiv:
   450                           	opt callstack 29
   451                           
   452                           ;incstack = 0
   453  007E56  0E00               	movlw	0
   454  007E58  6E06               	movwf	___lwdiv@quotient+1,c
   455  007E5A  0E00               	movlw	0
   456  007E5C  6E05               	movwf	___lwdiv@quotient,c
   457  007E5E  5003               	movf	___lwdiv@divisor,w,c
   458  007E60  1004               	iorwf	___lwdiv@divisor+1,w,c
   459  007E62  B4D8               	btfsc	status,2,c
   460  007E64  D01C               	goto	l617
   461  007E66  0E01               	movlw	1
   462  007E68  6E07               	movwf	___lwdiv@counter,c
   463  007E6A  D004               	goto	l1017
   464  007E6C                     l1015:
   465  007E6C  90D8               	bcf	status,0,c
   466  007E6E  3603               	rlcf	___lwdiv@divisor,f,c
   467  007E70  3604               	rlcf	___lwdiv@divisor+1,f,c
   468  007E72  2A07               	incf	___lwdiv@counter,f,c
   469  007E74                     l1017:
   470  007E74  AE04               	btfss	___lwdiv@divisor+1,7,c
   471  007E76  D7FA               	goto	l1015
   472  007E78                     u170:
   473  007E78  90D8               	bcf	status,0,c
   474  007E7A  3605               	rlcf	___lwdiv@quotient,f,c
   475  007E7C  3606               	rlcf	___lwdiv@quotient+1,f,c
   476  007E7E  5003               	movf	___lwdiv@divisor,w,c
   477  007E80  5C01               	subwf	___lwdiv@dividend,w,c
   478  007E82  5004               	movf	___lwdiv@divisor+1,w,c
   479  007E84  5802               	subwfb	___lwdiv@dividend+1,w,c
   480  007E86  A0D8               	btfss	status,0,c
   481  007E88  D005               	goto	l1027
   482  007E8A  5003               	movf	___lwdiv@divisor,w,c
   483  007E8C  5E01               	subwf	___lwdiv@dividend,f,c
   484  007E8E  5004               	movf	___lwdiv@divisor+1,w,c
   485  007E90  5A02               	subwfb	___lwdiv@dividend+1,f,c
   486  007E92  8005               	bsf	___lwdiv@quotient,0,c
   487  007E94                     l1027:
   488  007E94  90D8               	bcf	status,0,c
   489  007E96  3204               	rrcf	___lwdiv@divisor+1,f,c
   490  007E98  3203               	rrcf	___lwdiv@divisor,f,c
   491  007E9A  2E07               	decfsz	___lwdiv@counter,f,c
   492  007E9C  D7ED               	goto	u170
   493  007E9E                     l617:
   494  007E9E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   495  007EA2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   496  007EA6  0012               	return		;funcret
   497  007EA8                     __end_of___lwdiv:
   498                           	opt callstack 0
   499                           
   500 ;; *************** function _ADC_Init *****************
   501 ;; Defined at:
   502 ;;		line 92 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		None
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   516 ;;      Params:         0       0       0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0       0       0
   519 ;;      Totals:         0       0       0       0       0       0       0
   520 ;;Total ram usage:        0 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           	psect	text3
   530  007E0C                     __ptext3:
   531                           	opt callstack 0
   532  007E0C                     _ADC_Init:
   533                           	opt callstack 30
   534                           
   535                           ;main.c: 95:   ADCON0bits.ADON = 1;
   536                           
   537                           ;incstack = 0
   538  007E0C  80C2               	bsf	4034,0,c	;volatile
   539                           
   540                           ;main.c: 98:   ADCON2bits.ADFM = 1;
   541  007E0E  8EC0               	bsf	4032,7,c	;volatile
   542                           
   543                           ;main.c: 101:   ADCON2bits.ADCS2 = 1;
   544  007E10  84C0               	bsf	4032,2,c	;volatile
   545                           
   546                           ;main.c: 102:   ADCON2bits.ADCS1 = 0;
   547  007E12  92C0               	bcf	4032,1,c	;volatile
   548                           
   549                           ;main.c: 103:   ADCON2bits.ADCS0 = 0;
   550  007E14  90C0               	bcf	4032,0,c	;volatile
   551  007E16  0012               	return		;funcret
   552  007E18                     __end_of_ADC_Init:
   553                           	opt callstack 0
   554                           
   555 ;; *************** function _ADC_Channel_Select *****************
   556 ;; Defined at:
   557 ;;		line 115 in file "main.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  channel         2    0[COMRAM] int 
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   571 ;;      Params:         2       0       0       0       0       0       0
   572 ;;      Locals:         0       0       0       0       0       0       0
   573 ;;      Temps:          2       0       0       0       0       0       0
   574 ;;      Totals:         4       0       0       0       0       0       0
   575 ;;Total ram usage:        4 bytes
   576 ;; Hardware stack levels used:    1
   577 ;; This function calls:
   578 ;;		Nothing
   579 ;; This function is called by:
   580 ;;		_main
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           	psect	text4
   585  007EA8                     __ptext4:
   586                           	opt callstack 0
   587  007EA8                     _ADC_Channel_Select:
   588                           	opt callstack 30
   589                           
   590                           ;main.c: 120:     ADCON0 &= 0b00000001;
   591                           
   592                           ;incstack = 0
   593  007EA8  0E01               	movlw	1
   594  007EAA  16C2               	andwf	4034,f,c	;volatile
   595                           
   596                           ;main.c: 124:     switch (channel) {
   597  007EAC  D022               	goto	l1061
   598  007EAE                     l1033:
   599                           
   600                           ;main.c: 127:             ADCON0 |= 0b00000000;
   601  007EAE  50C2               	movf	4034,w,c	;volatile
   602                           
   603                           ;main.c: 128:             break;
   604  007EB0  0012               	return	
   605  007EB2                     l1035:
   606                           
   607                           ;main.c: 131:             ADCON0 |= 0b00000100;
   608  007EB2  84C2               	bsf	4034,2,c	;volatile
   609                           
   610                           ;main.c: 132:             break;
   611  007EB4  0012               	return	
   612  007EB6                     l1037:
   613                           
   614                           ;main.c: 135:             ADCON0 |= 0b00001000;
   615  007EB6  86C2               	bsf	4034,3,c	;volatile
   616                           
   617                           ;main.c: 136:             break;
   618  007EB8  0012               	return	
   619  007EBA                     l1039:
   620                           
   621                           ;main.c: 139:             ADCON0 |= 0b00001100;
   622  007EBA  0E0C               	movlw	12
   623  007EBC  12C2               	iorwf	4034,f,c	;volatile
   624                           
   625                           ;main.c: 140:             break;
   626  007EBE  0012               	return	
   627  007EC0                     l1041:
   628                           
   629                           ;main.c: 143:             ADCON0 |= 0b00010000;
   630  007EC0  88C2               	bsf	4034,4,c	;volatile
   631                           
   632                           ;main.c: 144:             break;
   633  007EC2  0012               	return	
   634  007EC4                     l1043:
   635                           
   636                           ;main.c: 147:             ADCON0 |= 0b00010100;
   637  007EC4  0E14               	movlw	20
   638  007EC6  12C2               	iorwf	4034,f,c	;volatile
   639                           
   640                           ;main.c: 148:             break;
   641  007EC8  0012               	return	
   642  007ECA                     l1045:
   643                           
   644                           ;main.c: 151:             ADCON0 |= 0b00011000;
   645  007ECA  0E18               	movlw	24
   646  007ECC  12C2               	iorwf	4034,f,c	;volatile
   647                           
   648                           ;main.c: 152:             break;
   649  007ECE  0012               	return	
   650  007ED0                     l1047:
   651                           
   652                           ;main.c: 155:             ADCON0 |= 0b00011100;
   653  007ED0  0E1C               	movlw	28
   654  007ED2  12C2               	iorwf	4034,f,c	;volatile
   655                           
   656                           ;main.c: 156:             break;
   657  007ED4  0012               	return	
   658  007ED6                     l1049:
   659                           
   660                           ;main.c: 159:             ADCON0 |= 0b00100000;
   661  007ED6  8AC2               	bsf	4034,5,c	;volatile
   662                           
   663                           ;main.c: 160:             break;
   664  007ED8  0012               	return	
   665  007EDA                     l1051:
   666                           
   667                           ;main.c: 163:             ADCON0 |= 0b00100100;
   668  007EDA  0E24               	movlw	36
   669  007EDC  12C2               	iorwf	4034,f,c	;volatile
   670                           
   671                           ;main.c: 164:             break;
   672  007EDE  0012               	return	
   673  007EE0                     l1053:
   674                           
   675                           ;main.c: 167:             ADCON0 |= 0b00101000;
   676  007EE0  0E28               	movlw	40
   677  007EE2  12C2               	iorwf	4034,f,c	;volatile
   678                           
   679                           ;main.c: 168:             break;
   680  007EE4  0012               	return	
   681  007EE6                     l1055:
   682                           
   683                           ;main.c: 171:             ADCON0 |= 0b00101100;
   684  007EE6  0E2C               	movlw	44
   685  007EE8  12C2               	iorwf	4034,f,c	;volatile
   686                           
   687                           ;main.c: 172:             break;
   688  007EEA  0012               	return	
   689  007EEC                     l1057:
   690                           
   691                           ;main.c: 175:             ADCON0 |= 0b00110000;
   692  007EEC  0E30               	movlw	48
   693  007EEE  12C2               	iorwf	4034,f,c	;volatile
   694                           
   695                           ;main.c: 176:             break;
   696  007EF0  0012               	return	
   697  007EF2                     l1061:
   698  007EF2  C001  F003         	movff	ADC_Channel_Select@channel,??_ADC_Channel_Select
   699  007EF6  C002  F004         	movff	ADC_Channel_Select@channel+1,??_ADC_Channel_Select+1
   700                           
   701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   702                           ; Switch size 1, requested type "simple"
   703                           ; Number of cases is 1, Range of values is 0 to 0
   704                           ; switch strategies available:
   705                           ; Name         Instructions Cycles
   706                           ; simple_byte            4     3 (average)
   707                           ;	Chosen strategy is simple_byte
   708  007EFA  5004               	movf	??_ADC_Channel_Select+1,w,c
   709  007EFC  0A00               	xorlw	0	; case 0
   710  007EFE  A4D8               	btfss	status,2,c
   711  007F00  0012               	return	
   712                           
   713                           ; Switch size 1, requested type "simple"
   714                           ; Number of cases is 13, Range of values is 0 to 12
   715                           ; switch strategies available:
   716                           ; Name         Instructions Cycles
   717                           ; simple_byte           40    21 (average)
   718                           ;	Chosen strategy is simple_byte
   719  007F02  5003               	movf	??_ADC_Channel_Select,w,c
   720  007F04  0A00               	xorlw	0	; case 0
   721  007F06  B4D8               	btfsc	status,2,c
   722  007F08  D7D2               	goto	l1033
   723  007F0A  0A01               	xorlw	1	; case 1
   724  007F0C  B4D8               	btfsc	status,2,c
   725  007F0E  D7D1               	goto	l1035
   726  007F10  0A03               	xorlw	3	; case 2
   727  007F12  B4D8               	btfsc	status,2,c
   728  007F14  D7D0               	goto	l1037
   729  007F16  0A01               	xorlw	1	; case 3
   730  007F18  B4D8               	btfsc	status,2,c
   731  007F1A  D7CF               	goto	l1039
   732  007F1C  0A07               	xorlw	7	; case 4
   733  007F1E  B4D8               	btfsc	status,2,c
   734  007F20  D7CF               	goto	l1041
   735  007F22  0A01               	xorlw	1	; case 5
   736  007F24  B4D8               	btfsc	status,2,c
   737  007F26  D7CE               	goto	l1043
   738  007F28  0A03               	xorlw	3	; case 6
   739  007F2A  B4D8               	btfsc	status,2,c
   740  007F2C  D7CE               	goto	l1045
   741  007F2E  0A01               	xorlw	1	; case 7
   742  007F30  B4D8               	btfsc	status,2,c
   743  007F32  D7CE               	goto	l1047
   744  007F34  0A0F               	xorlw	15	; case 8
   745  007F36  B4D8               	btfsc	status,2,c
   746  007F38  D7CE               	goto	l1049
   747  007F3A  0A01               	xorlw	1	; case 9
   748  007F3C  B4D8               	btfsc	status,2,c
   749  007F3E  D7CD               	goto	l1051
   750  007F40  0A03               	xorlw	3	; case 10
   751  007F42  B4D8               	btfsc	status,2,c
   752  007F44  D7CD               	goto	l1053
   753  007F46  0A01               	xorlw	1	; case 11
   754  007F48  B4D8               	btfsc	status,2,c
   755  007F4A  D7CD               	goto	l1055
   756  007F4C  0A07               	xorlw	7	; case 12
   757  007F4E  A4D8               	btfss	status,2,c
   758  007F50  0012               	return	
   759  007F52  D7CC               	goto	l1057
   760  007F54                     __end_of_ADC_Channel_Select:
   761                           	opt callstack 0
   762  0000                     
   763                           	psect	rparam
   764  0000                     tosu	equ	0xFFF
   765                           tosh	equ	0xFFE
   766                           tosl	equ	0xFFD
   767                           stkptr	equ	0xFFC
   768                           pclatu	equ	0xFFB
   769                           pclath	equ	0xFFA
   770                           pcl	equ	0xFF9
   771                           tblptru	equ	0xFF8
   772                           tblptrh	equ	0xFF7
   773                           tblptrl	equ	0xFF6
   774                           tablat	equ	0xFF5
   775                           prodh	equ	0xFF4
   776                           prodl	equ	0xFF3
   777                           indf0	equ	0xFEF
   778                           postinc0	equ	0xFEE
   779                           postdec0	equ	0xFED
   780                           preinc0	equ	0xFEC
   781                           plusw0	equ	0xFEB
   782                           fsr0h	equ	0xFEA
   783                           fsr0l	equ	0xFE9
   784                           wreg	equ	0xFE8
   785                           indf1	equ	0xFE7
   786                           postinc1	equ	0xFE6
   787                           postdec1	equ	0xFE5
   788                           preinc1	equ	0xFE4
   789                           plusw1	equ	0xFE3
   790                           fsr1h	equ	0xFE2
   791                           fsr1l	equ	0xFE1
   792                           bsr	equ	0xFE0
   793                           indf2	equ	0xFDF
   794                           postinc2	equ	0xFDE
   795                           postdec2	equ	0xFDD
   796                           preinc2	equ	0xFDC
   797                           plusw2	equ	0xFDB
   798                           fsr2h	equ	0xFDA
   799                           fsr2l	equ	0xFD9
   800                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     19      19
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_AD_Read
    _AD_Read->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     575
                                             13 COMRAM     6     6      0
                 _ADC_Channel_Select
                           _ADC_Init
                            _AD_Read
 ---------------------------------------------------------------------------------
 (1) _AD_Read                                              6     4      2     360
                                              7 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Channel_Select                                   4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Channel_Select
   _ADC_Init
   _AD_Read
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     13      13       1       15.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Mar 13 00:17:21 2019

                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l103 7E1A  
                        l113 7FAA                          l115 7FC0                          l117 7FD6  
                        l119 7FEC                          l617 7E9E                 __CFG_CPB$OFF 000000  
                        _RD0 007C18                          _RD1 007C19                          _RD2 007C1A  
                        _RD3 007C1B                          _RD4 007C1C                          _RD5 007C1D  
                        u210 7FA6                          u220 7FBC                          u230 7FD2  
                        u240 7FE8                          u170 7E78                 __CFG_CPD$OFF 000000  
            __end_of_AD_Read 7E56                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l1101 7FC2                         l1015 7E6C                         l1041 7EC0  
                       l1033 7EAE                         l1017 7E74                         l1105 7FD8  
                       l1113 7FFA                         l1051 7EDA                         l1043 7EC4  
                       l1035 7EB2                         l1027 7E94                         l1053 7EE0  
                       l1045 7ECA                         l1037 7EB6                         l1061 7EF2  
                       l1109 7FEE                         l1055 7EE6                         l1047 7ED0  
                       l1039 7EBA                         l1057 7EEC                         l1049 7ED6  
                       l1097 7FAC                         l1089 7F7E                         _LATD 000F8C  
                       _main 7F54             __end_of_ADC_Init 7E18                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                      ?_main 0001                        _LATD0 007C60                        _LATD1 007C61  
                      _LATD2 007C62                        _LATD3 007C63              __end_of___lwdiv 7EA8  
                      _TRISA 000F92                        _TRISD 000F95                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        status 000FD8               __CFG_PBADEN$ON 000000  
            __initialization 7E02                 __end_of_main 8000                       ??_main 000E  
                  ??_AD_Read 000A                __activetblptr 000002                       _ADCON0 000FC2  
                     _ADRESH 000FC4                       _ADRESL 000FC3               __CFG_XINST$OFF 000000  
             __CFG_STVREN$ON 000000                    ??___lwdiv 0005                    ?_ADC_Init 0001  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 7E02  
         _ADC_Channel_Select 7EA8                ___rparam_used 000001               __pcstackCOMRAM 0001  
        ?_ADC_Channel_Select 0001     AD_Read@full_16_bit_value 000C              __CFG_OSC$INTIO7 000000  
                 ??_ADC_Init 0001         ??_ADC_Channel_Select 0003                      _AD_Read 7E18  
                    __Hparam 0000                      __Lparam 0000                      ___lwdiv 7E56  
                    __pcinit 7E02                      __ramtop 0600                      __ptext0 7F54  
                    __ptext1 7E18                      __ptext2 7E56                      __ptext3 7E0C  
                    __ptext4 7EA8            main@AD_Read_Count 000E         end_of_initialization 7E02  
              __Lmediumconst 0000            __size_of_ADC_Init 000C          start_initialization 7E02  
           __CFG_LPT1OSC$OFF 000000                     ?_AD_Read 0008  __size_of_ADC_Channel_Select 00AC  
           ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000                     ?___lwdiv 0001  
                   _ADC_Init 7E0C             ___lwdiv@quotient 0005             __CFG_WDTPS$32768 000000  
                 _ADCON0bits 000FC2                   _ADCON2bits 000FC0             __size_of_AD_Read 003E  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
           __size_of___lwdiv 0052              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
              __size_of_main 00AC    ADC_Channel_Select@channel 0001                 main@AD_Delay 0010  
               main@AD_Value 0012   __end_of_ADC_Channel_Select 7F54  
