

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar  7 17:05:01 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4520 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _TRISD	set	3989
    54  0000                     _RD0	set	31768
    55  0000                     _RD1	set	31769
    56  0000                     _RD5	set	31773
    57  0000                     _RD4	set	31772
    58  0000                     _RD3	set	31771
    59  0000                     _RD2	set	31770
    60                           
    61                           	psect	smallconst
    62  000600                     __psmallconst:
    63                           	opt callstack 0
    64  000600  00                 	db	0
    65  000601                     STR_2:
    66  000601  43                 	db	67	;'C'
    67  000602  6F                 	db	111	;'o'
    68  000603  72                 	db	114	;'r'
    69  000604  79                 	db	121	;'y'
    70  000605  20                 	db	32
    71  000606  57                 	db	87	;'W'
    72  000607  2E                 	db	46
    73  000608  20                 	db	32
    74  000609  48                 	db	72	;'H'
    75  00060A  6F                 	db	111	;'o'
    76  00060B  64                 	db	100	;'d'
    77  00060C  67                 	db	103	;'g'
    78  00060D  65                 	db	101	;'e'
    79  00060E  00                 	db	0
    80  00060F                     STR_1:
    81  00060F  4C                 	db	76	;'L'
    82  000610  43                 	db	67	;'C'
    83  000611  44                 	db	68	;'D'
    84  000612  20                 	db	32
    85  000613  4D                 	db	77	;'M'
    86  000614  6F                 	db	111	;'o'
    87  000615  64                 	db	100	;'d'
    88  000616  75                 	db	117	;'u'
    89  000617  6C                 	db	108	;'l'
    90  000618  65                 	db	101	;'e'
    91  000619  00                 	db	0
    92                           
    93                           ; #config settings
    94  00061A  00                 	db	0	; dummy byte at the end
    95  0000                     
    96                           	psect	cinit
    97  0007C4                     __pcinit:
    98                           	opt callstack 0
    99  0007C4                     start_initialization:
   100                           	opt callstack 0
   101  0007C4                     __initialization:
   102                           	opt callstack 0
   103  0007C4                     end_of_initialization:
   104                           	opt callstack 0
   105  0007C4                     __end_of__initialization:
   106                           	opt callstack 0
   107  0007C4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   108  0007C6  6EF8               	movwf	tblptru,c
   109  0007C8  0E06               	movlw	high __Lsmallconst
   110  0007CA  6EF7               	movwf	tblptrh,c
   111  0007CC  0100               	movlb	0
   112  0007CE  EF6C  F003         	goto	_main	;jump to C main() function
   113                           
   114                           	psect	cstackCOMRAM
   115  000001                     __pcstackCOMRAM:
   116                           	opt callstack 0
   117  000001                     LCD_Set_Pins@lower_nibble:
   118                           	opt callstack 0
   119                           
   120                           ; 1 bytes @ 0x0
   121  000001                     	ds	1
   122  000002                     ??_LCD_Cmd:
   123  000002                     Lcd_Write_Char@upper_nibble:
   124                           	opt callstack 0
   125                           
   126                           ; 1 bytes @ 0x1
   127  000002                     	ds	1
   128  000003                     LCD_Cmd@cmd:
   129                           	opt callstack 0
   130  000003                     Lcd_Write_Char@lower_nibble:
   131                           	opt callstack 0
   132                           
   133                           ; 1 bytes @ 0x2
   134  000003                     	ds	1
   135  000004                     ??_Lcd_Init:
   136  000004                     Lcd_Set_Cursor@col:
   137                           	opt callstack 0
   138  000004                     Lcd_Write_Char@alpha:
   139                           	opt callstack 0
   140                           
   141                           ; 1 bytes @ 0x3
   142  000004                     	ds	1
   143  000005                     Lcd_Set_Cursor@row:
   144                           	opt callstack 0
   145  000005                     Lcd_Write_String@string:
   146                           	opt callstack 0
   147                           
   148                           ; 2 bytes @ 0x4
   149  000005                     	ds	1
   150  000006                     Lcd_Set_Cursor@upper_nibble:
   151                           	opt callstack 0
   152                           
   153                           ; 1 bytes @ 0x5
   154  000006                     	ds	1
   155  000007                     ??_Lcd_Write_String:
   156  000007                     Lcd_Set_Cursor@lower_nibble:
   157                           	opt callstack 0
   158                           
   159                           ; 1 bytes @ 0x6
   160  000007                     	ds	1
   161  000008                     Lcd_Set_Cursor@position:
   162                           	opt callstack 0
   163                           
   164                           ; 1 bytes @ 0x7
   165  000008                     	ds	1
   166  000009                     Lcd_Write_String@i:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0x8
   170  000009                     	ds	2
   171  00000B                     
   172                           ; 1 bytes @ 0xA
   173 ;;
   174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   175 ;;
   176 ;; *************** function _main *****************
   177 ;; Defined at:
   178 ;;		line 84 in file "main.c"
   179 ;; Parameters:    Size  Location     Type
   180 ;;		None
   181 ;; Auto vars:     Size  Location     Type
   182 ;;  i               2    0        unsigned int 
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : 0/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   192 ;;      Params:         0       0       0       0       0       0       0
   193 ;;      Locals:         0       0       0       0       0       0       0
   194 ;;      Temps:          0       0       0       0       0       0       0
   195 ;;      Totals:         0       0       0       0       0       0       0
   196 ;;Total ram usage:        0 bytes
   197 ;; Hardware stack levels required when called:    3
   198 ;; This function calls:
   199 ;;		_Lcd_Clear
   200 ;;		_Lcd_Init
   201 ;;		_Lcd_Set_Cursor
   202 ;;		_Lcd_Write_String
   203 ;; This function is called by:
   204 ;;		Startup code after reset
   205 ;; This function uses a non-reentrant model
   206 ;;
   207                           
   208                           	psect	text0
   209  0006D8                     __ptext0:
   210                           	opt callstack 0
   211  0006D8                     _main:
   212                           	opt callstack 28
   213                           
   214                           ;main.c: 87:     unsigned int i;;main.c: 90:     TRISD = 0x00;
   215                           
   216                           ;incstack = 0
   217  0006D8  0E00               	movlw	0
   218  0006DA  6E95               	movwf	3989,c	;volatile
   219                           
   220                           ;main.c: 93:     Lcd_Init();
   221  0006DC  EC0E  F003         	call	_Lcd_Init	;wreg free
   222                           
   223                           ;main.c: 100:         Lcd_Clear();
   224  0006E0  ECE9  F003         	call	_Lcd_Clear	;wreg free
   225                           
   226                           ;main.c: 103:         Lcd_Set_Cursor(1,1);
   227  0006E4  0E01               	movlw	1
   228  0006E6  6E04               	movwf	Lcd_Set_Cursor@col,c
   229  0006E8  0E01               	movlw	1
   230  0006EA  ECA5  F003         	call	_Lcd_Set_Cursor
   231                           
   232                           ;main.c: 104:         Lcd_Write_String("LCD Module");
   233  0006EE  0E0F               	movlw	low STR_1
   234  0006F0  6E05               	movwf	Lcd_Write_String@string,c
   235  0006F2  0E06               	movlw	high STR_1
   236  0006F4  6E06               	movwf	Lcd_Write_String@string+1,c
   237  0006F6  EC47  F003         	call	_Lcd_Write_String	;wreg free
   238                           
   239                           ;main.c: 107:         Lcd_Set_Cursor(2,1);
   240  0006FA  0E01               	movlw	1
   241  0006FC  6E04               	movwf	Lcd_Set_Cursor@col,c
   242  0006FE  0E02               	movlw	2
   243  000700  ECA5  F003         	call	_Lcd_Set_Cursor
   244                           
   245                           ;main.c: 108:         Lcd_Write_String("Cory W. Hodge");
   246  000704  0E01               	movlw	low STR_2
   247  000706  6E05               	movwf	Lcd_Write_String@string,c
   248  000708  0E06               	movlw	high STR_2
   249  00070A  6E06               	movwf	Lcd_Write_String@string+1,c
   250  00070C  EC47  F003         	call	_Lcd_Write_String	;wreg free
   251  000710                     l61:
   252                           
   253                           ;main.c: 116:     {;main.c: 120:     }
   254  000710  D7FF               	goto	l61
   255  000712                     __end_of_main:
   256                           	opt callstack 0
   257                           
   258 ;; *************** function _Lcd_Write_String *****************
   259 ;; Defined at:
   260 ;;		line 172 in file "./LCD_MODULE.h"
   261 ;; Parameters:    Size  Location     Type
   262 ;;  string          2    4[COMRAM] PTR unsigned char 
   263 ;;		 -> STR_2(14), STR_1(11), 
   264 ;; Auto vars:     Size  Location     Type
   265 ;;  i               2    8[COMRAM] int 
   266 ;; Return value:  Size  Location     Type
   267 ;;                  1    wreg      void 
   268 ;; Registers used:
   269 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   270 ;; Tracked objects:
   271 ;;		On entry : 0/0
   272 ;;		On exit  : 0/0
   273 ;;		Unchanged: 0/0
   274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   275 ;;      Params:         2       0       0       0       0       0       0
   276 ;;      Locals:         2       0       0       0       0       0       0
   277 ;;      Temps:          2       0       0       0       0       0       0
   278 ;;      Totals:         6       0       0       0       0       0       0
   279 ;;Total ram usage:        6 bytes
   280 ;; Hardware stack levels used:    1
   281 ;; Hardware stack levels required when called:    2
   282 ;; This function calls:
   283 ;;		_Lcd_Write_Char
   284 ;; This function is called by:
   285 ;;		_main
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289                           	psect	text1
   290  00068E                     __ptext1:
   291                           	opt callstack 0
   292  00068E                     _Lcd_Write_String:
   293                           	opt callstack 28
   294                           
   295                           ;./LCD_MODULE.h: 172: void Lcd_Write_String(char *string);./LCD_MODULE.h: 173: {;./LCD_M
      +                          ODULE.h: 174:  int i;;./LCD_MODULE.h: 177:  for(i=0; string[i] !='\0' ;i++)
   296                           
   297                           ;incstack = 0
   298  00068E  0E00               	movlw	0
   299  000690  6E0A               	movwf	Lcd_Write_String@i+1,c
   300  000692  0E00               	movlw	0
   301  000694  6E09               	movwf	Lcd_Write_String@i,c
   302  000696  D010               	goto	l868
   303  000698                     l864:
   304                           
   305                           ;./LCD_MODULE.h: 178:     Lcd_Write_Char( string[i] );
   306  000698  5009               	movf	Lcd_Write_String@i,w,c
   307  00069A  2405               	addwf	Lcd_Write_String@string,w,c
   308  00069C  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   309  00069E  500A               	movf	Lcd_Write_String@i+1,w,c
   310  0006A0  2006               	addwfc	Lcd_Write_String@string+1,w,c
   311  0006A2  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   312  0006A4  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   313  0006A8  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   314  0006AC                     	if	0	;tblptru may be non-zero
   315  0006AC                     	endif
   316  0006AC                     	if	0	;tblptru may be non-zero
   317  0006AC                     	endif
   318  0006AC  0008               	tblrd		*
   319  0006AE  50F5               	movf	tablat,w,c
   320  0006B0  EC89  F003         	call	_Lcd_Write_Char
   321  0006B4  4A09               	infsnz	Lcd_Write_String@i,f,c
   322  0006B6  2A0A               	incf	Lcd_Write_String@i+1,f,c
   323  0006B8                     l868:
   324  0006B8  5009               	movf	Lcd_Write_String@i,w,c
   325  0006BA  2405               	addwf	Lcd_Write_String@string,w,c
   326  0006BC  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   327  0006BE  500A               	movf	Lcd_Write_String@i+1,w,c
   328  0006C0  2006               	addwfc	Lcd_Write_String@string+1,w,c
   329  0006C2  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   330  0006C4  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   331  0006C8  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   332  0006CC                     	if	0	;tblptru may be non-zero
   333  0006CC                     	endif
   334  0006CC                     	if	0	;tblptru may be non-zero
   335  0006CC                     	endif
   336  0006CC  0008               	tblrd		*
   337  0006CE  50F5               	movf	tablat,w,c
   338  0006D0  0900               	iorlw	0
   339  0006D2  B4D8               	btfsc	status,2,c
   340  0006D4  0012               	return	
   341  0006D6  D7E0               	goto	l864
   342  0006D8                     __end_of_Lcd_Write_String:
   343                           	opt callstack 0
   344                           
   345 ;; *************** function _Lcd_Write_Char *****************
   346 ;; Defined at:
   347 ;;		line 139 in file "./LCD_MODULE.h"
   348 ;; Parameters:    Size  Location     Type
   349 ;;  alpha           1    wreg     unsigned char 
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  alpha           1    3[COMRAM] unsigned char 
   352 ;;  lower_nibble    1    2[COMRAM] unsigned char 
   353 ;;  upper_nibble    1    1[COMRAM] unsigned char 
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, status,2, status,0, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   363 ;;      Params:         0       0       0       0       0       0       0
   364 ;;      Locals:         3       0       0       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0       0       0
   366 ;;      Totals:         3       0       0       0       0       0       0
   367 ;;Total ram usage:        3 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; Hardware stack levels required when called:    1
   370 ;; This function calls:
   371 ;;		_LCD_Set_Pins
   372 ;; This function is called by:
   373 ;;		_Lcd_Write_String
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text2
   378  000712                     __ptext2:
   379                           	opt callstack 0
   380  000712                     _Lcd_Write_Char:
   381                           	opt callstack 28
   382                           
   383                           ;incstack = 0
   384                           ;Lcd_Write_Char@alpha stored from wreg
   385  000712  6E04               	movwf	Lcd_Write_Char@alpha,c
   386                           
   387                           ;./LCD_MODULE.h: 139: void Lcd_Write_Char(char alpha);./LCD_MODULE.h: 140: {;./LCD_MODUL
      +                          E.h: 141:    char upper_nibble,lower_nibble;;./LCD_MODULE.h: 144:    upper_nibble = alph
      +                          a & 0xF0;
   388  000714  5004               	movf	Lcd_Write_Char@alpha,w,c
   389  000716  0BF0               	andlw	240
   390  000718  6E02               	movwf	Lcd_Write_Char@upper_nibble,c
   391                           
   392                           ;./LCD_MODULE.h: 145:    lower_nibble = alpha & 0x0F;
   393  00071A  5004               	movf	Lcd_Write_Char@alpha,w,c
   394  00071C  0B0F               	andlw	15
   395  00071E  6E03               	movwf	Lcd_Write_Char@lower_nibble,c
   396                           
   397                           ;./LCD_MODULE.h: 150:    RD1 = 1;
   398  000720  8283               	bsf	3971,1,c	;volatile
   399                           
   400                           ;./LCD_MODULE.h: 153:    LCD_Set_Pins( upper_nibble >> 4 );
   401  000722  3802               	swapf	Lcd_Write_Char@upper_nibble,w,c
   402  000724  0B0F               	andlw	15
   403  000726  ECBC  F003         	call	_LCD_Set_Pins
   404                           
   405                           ;./LCD_MODULE.h: 156:    RD0 = 1;
   406  00072A  8083               	bsf	3971,0,c	;volatile
   407                           
   408                           ;./LCD_MODULE.h: 157:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   409  00072C  0E1A               	movlw	26
   410  00072E                     u97:
   411  00072E  2EE8               	decfsz	wreg,f,c
   412  000730  D7FE               	bra	u97
   413  000732  D000               	nop2	
   414                           
   415                           ;./LCD_MODULE.h: 158:    RD0 = 0;
   416  000734  9083               	bcf	3971,0,c	;volatile
   417                           
   418                           ;./LCD_MODULE.h: 161:    LCD_Set_Pins(lower_nibble);
   419  000736  5003               	movf	Lcd_Write_Char@lower_nibble,w,c
   420  000738  ECBC  F003         	call	_LCD_Set_Pins
   421                           
   422                           ;./LCD_MODULE.h: 162:    RD0 = 1;
   423  00073C  8083               	bsf	3971,0,c	;volatile
   424                           
   425                           ;./LCD_MODULE.h: 163:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   426  00073E  0E1A               	movlw	26
   427  000740                     u107:
   428  000740  2EE8               	decfsz	wreg,f,c
   429  000742  D7FE               	bra	u107
   430  000744  D000               	nop2	
   431                           
   432                           ;./LCD_MODULE.h: 164:    RD0 = 0;
   433  000746  9083               	bcf	3971,0,c	;volatile
   434  000748  0012               	return		;funcret
   435  00074A                     __end_of_Lcd_Write_Char:
   436                           	opt callstack 0
   437                           
   438 ;; *************** function _Lcd_Set_Cursor *****************
   439 ;; Defined at:
   440 ;;		line 85 in file "./LCD_MODULE.h"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  row             1    wreg     unsigned char 
   443 ;;  col             1    3[COMRAM] unsigned char 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  row             1    4[COMRAM] unsigned char 
   446 ;;  position        1    7[COMRAM] unsigned char 
   447 ;;  lower_nibble    1    6[COMRAM] unsigned char 
   448 ;;  upper_nibble    1    5[COMRAM] unsigned char 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, status,2, status,0, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   458 ;;      Params:         1       0       0       0       0       0       0
   459 ;;      Locals:         4       0       0       0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0
   461 ;;      Totals:         5       0       0       0       0       0       0
   462 ;;Total ram usage:        5 bytes
   463 ;; Hardware stack levels used:    1
   464 ;; Hardware stack levels required when called:    2
   465 ;; This function calls:
   466 ;;		_LCD_Cmd
   467 ;; This function is called by:
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text3
   473  00074A                     __ptext3:
   474                           	opt callstack 0
   475  00074A                     _Lcd_Set_Cursor:
   476                           	opt callstack 28
   477                           
   478                           ;incstack = 0
   479                           ;Lcd_Set_Cursor@row stored from wreg
   480  00074A  6E05               	movwf	Lcd_Set_Cursor@row,c
   481                           
   482                           ;./LCD_MODULE.h: 85: void Lcd_Set_Cursor(char row, char col);./LCD_MODULE.h: 86: {;./LCD
      +                          _MODULE.h: 87:  char position,upper_nibble,lower_nibble;;./LCD_MODULE.h: 90:  if(row == 
      +                          1)
   483  00074C  0405               	decf	Lcd_Set_Cursor@row,w,c
   484  00074E  A4D8               	btfss	status,2,c
   485  000750  D003               	goto	l856
   486                           
   487                           ;./LCD_MODULE.h: 91:  {;./LCD_MODULE.h: 92:    position = 0x80 + col - 1;
   488  000752  5004               	movf	Lcd_Set_Cursor@col,w,c
   489  000754  0F7F               	addlw	127
   490  000756  D002               	goto	L1
   491  000758                     l856:
   492                           
   493                           ;./LCD_MODULE.h: 96:         position = 0xC0 + col - 1;
   494  000758  5004               	movf	Lcd_Set_Cursor@col,w,c
   495  00075A  0FBF               	addlw	191
   496  00075C                     L1:
   497  00075C  6E08               	movwf	Lcd_Set_Cursor@position,c
   498                           
   499                           ;./LCD_MODULE.h: 100:  upper_nibble = position>>4;
   500                           
   501                           ;./LCD_MODULE.h: 97:     }
   502  00075E  3808               	swapf	Lcd_Set_Cursor@position,w,c
   503  000760  0B0F               	andlw	15
   504  000762  6E06               	movwf	Lcd_Set_Cursor@upper_nibble,c
   505                           
   506                           ;./LCD_MODULE.h: 103:  lower_nibble = position & 0x0F;
   507  000764  5008               	movf	Lcd_Set_Cursor@position,w,c
   508  000766  0B0F               	andlw	15
   509  000768  6E07               	movwf	Lcd_Set_Cursor@lower_nibble,c
   510                           
   511                           ;./LCD_MODULE.h: 106:     LCD_Cmd(upper_nibble);
   512  00076A  5006               	movf	Lcd_Set_Cursor@upper_nibble,w,c
   513  00076C  ECD2  F003         	call	_LCD_Cmd
   514                           
   515                           ;./LCD_MODULE.h: 109:     LCD_Cmd(lower_nibble);
   516  000770  5007               	movf	Lcd_Set_Cursor@lower_nibble,w,c
   517  000772  ECD2  F003         	call	_LCD_Cmd
   518  000776  0012               	return		;funcret
   519  000778                     __end_of_Lcd_Set_Cursor:
   520                           	opt callstack 0
   521                           
   522 ;; *************** function _Lcd_Init *****************
   523 ;; Defined at:
   524 ;;		line 120 in file "./LCD_MODULE.h"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, status,2, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   538 ;;      Params:         0       0       0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0
   540 ;;      Temps:          1       0       0       0       0       0       0
   541 ;;      Totals:         1       0       0       0       0       0       0
   542 ;;Total ram usage:        1 bytes
   543 ;; Hardware stack levels used:    1
   544 ;; Hardware stack levels required when called:    2
   545 ;; This function calls:
   546 ;;		_LCD_Cmd
   547 ;;		_LCD_Set_Pins
   548 ;; This function is called by:
   549 ;;		_main
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text4
   554  00061C                     __ptext4:
   555                           	opt callstack 0
   556  00061C                     _Lcd_Init:
   557                           	opt callstack 28
   558                           
   559                           ;./LCD_MODULE.h: 122:   LCD_Set_Pins(0x00);
   560                           
   561                           ;incstack = 0
   562  00061C  0E00               	movlw	0
   563  00061E  ECBC  F003         	call	_LCD_Set_Pins
   564                           
   565                           ;./LCD_MODULE.h: 123:    _delay((unsigned long)((10)*(8000000/4000.0)));
   566  000622  0E1A               	movlw	26
   567  000624  6E04               	movwf	??_Lcd_Init& (0+255),c
   568  000626  0EF8               	movlw	248
   569  000628                     u117:
   570  000628  2EE8               	decfsz	wreg,f,c
   571  00062A  D7FE               	bra	u117
   572  00062C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   573  00062E  D7FC               	bra	u117
   574  000630  D000               	nop2	
   575                           
   576                           ;./LCD_MODULE.h: 124:   LCD_Cmd(0x03);
   577  000632  0E03               	movlw	3
   578  000634  ECD2  F003         	call	_LCD_Cmd
   579                           
   580                           ;./LCD_MODULE.h: 125:  _delay((unsigned long)((5)*(8000000/4000.0)));
   581  000638  0E0D               	movlw	13
   582  00063A  6E04               	movwf	??_Lcd_Init& (0+255),c
   583  00063C  0EFC               	movlw	252
   584  00063E                     u127:
   585  00063E  2EE8               	decfsz	wreg,f,c
   586  000640  D7FE               	bra	u127
   587  000642  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   588  000644  D7FC               	bra	u127
   589                           
   590                           ;./LCD_MODULE.h: 126:   LCD_Cmd(0x03);
   591  000646  0E03               	movlw	3
   592  000648  ECD2  F003         	call	_LCD_Cmd
   593                           
   594                           ;./LCD_MODULE.h: 127:  _delay((unsigned long)((10)*(8000000/4000.0)));
   595  00064C  0E1A               	movlw	26
   596  00064E  6E04               	movwf	??_Lcd_Init& (0+255),c
   597  000650  0EF8               	movlw	248
   598  000652                     u137:
   599  000652  2EE8               	decfsz	wreg,f,c
   600  000654  D7FE               	bra	u137
   601  000656  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   602  000658  D7FC               	bra	u137
   603  00065A  D000               	nop2	
   604                           
   605                           ;./LCD_MODULE.h: 128:   LCD_Cmd(0x03);
   606  00065C  0E03               	movlw	3
   607  00065E  ECD2  F003         	call	_LCD_Cmd
   608                           
   609                           ;./LCD_MODULE.h: 129:   LCD_Cmd(0x02);
   610  000662  0E02               	movlw	2
   611  000664  ECD2  F003         	call	_LCD_Cmd
   612                           
   613                           ;./LCD_MODULE.h: 130:   LCD_Cmd(0x02);
   614  000668  0E02               	movlw	2
   615  00066A  ECD2  F003         	call	_LCD_Cmd
   616                           
   617                           ;./LCD_MODULE.h: 131:   LCD_Cmd(0x08);
   618  00066E  0E08               	movlw	8
   619  000670  ECD2  F003         	call	_LCD_Cmd
   620                           
   621                           ;./LCD_MODULE.h: 132:   LCD_Cmd(0x00);
   622  000674  0E00               	movlw	0
   623  000676  ECD2  F003         	call	_LCD_Cmd
   624                           
   625                           ;./LCD_MODULE.h: 133:   LCD_Cmd(0x0C);
   626  00067A  0E0C               	movlw	12
   627  00067C  ECD2  F003         	call	_LCD_Cmd
   628                           
   629                           ;./LCD_MODULE.h: 134:   LCD_Cmd(0x00);
   630  000680  0E00               	movlw	0
   631  000682  ECD2  F003         	call	_LCD_Cmd
   632                           
   633                           ;./LCD_MODULE.h: 135:   LCD_Cmd(0x06);
   634  000686  0E06               	movlw	6
   635  000688  ECD2  F003         	call	_LCD_Cmd
   636  00068C  0012               	return		;funcret
   637  00068E                     __end_of_Lcd_Init:
   638                           	opt callstack 0
   639                           
   640 ;; *************** function _Lcd_Clear *****************
   641 ;; Defined at:
   642 ;;		line 72 in file "./LCD_MODULE.h"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  2   32[None  ] int 
   649 ;; Registers used:
   650 ;;		wreg, status,2, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   656 ;;      Params:         0       0       0       0       0       0       0
   657 ;;      Locals:         0       0       0       0       0       0       0
   658 ;;      Temps:          0       0       0       0       0       0       0
   659 ;;      Totals:         0       0       0       0       0       0       0
   660 ;;Total ram usage:        0 bytes
   661 ;; Hardware stack levels used:    1
   662 ;; Hardware stack levels required when called:    2
   663 ;; This function calls:
   664 ;;		_LCD_Cmd
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text5
   671  0007D2                     __ptext5:
   672                           	opt callstack 0
   673  0007D2                     _Lcd_Clear:
   674                           	opt callstack 28
   675                           
   676                           ;./LCD_MODULE.h: 74:  LCD_Cmd(0);
   677                           
   678                           ;incstack = 0
   679  0007D2  0E00               	movlw	0
   680  0007D4  ECD2  F003         	call	_LCD_Cmd
   681                           
   682                           ;./LCD_MODULE.h: 75:  LCD_Cmd(1);
   683  0007D8  0E01               	movlw	1
   684  0007DA  ECD2  F003         	call	_LCD_Cmd
   685  0007DE  0012               	return		;funcret
   686  0007E0                     __end_of_Lcd_Clear:
   687                           	opt callstack 0
   688                           
   689 ;; *************** function _LCD_Cmd *****************
   690 ;; Defined at:
   691 ;;		line 48 in file "./LCD_MODULE.h"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  cmd             1    wreg     unsigned char 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  cmd             1    2[COMRAM] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   705 ;;      Params:         0       0       0       0       0       0       0
   706 ;;      Locals:         1       0       0       0       0       0       0
   707 ;;      Temps:          1       0       0       0       0       0       0
   708 ;;      Totals:         2       0       0       0       0       0       0
   709 ;;Total ram usage:        2 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    1
   712 ;; This function calls:
   713 ;;		_LCD_Set_Pins
   714 ;; This function is called by:
   715 ;;		_Lcd_Clear
   716 ;;		_Lcd_Set_Cursor
   717 ;;		_Lcd_Init
   718 ;;		_Lcd_Shift_Right
   719 ;;		_Lcd_Shift_Left
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           	psect	text6
   724  0007A4                     __ptext6:
   725                           	opt callstack 0
   726  0007A4                     _LCD_Cmd:
   727                           	opt callstack 28
   728                           
   729                           ;incstack = 0
   730                           ;LCD_Cmd@cmd stored from wreg
   731  0007A4  6E03               	movwf	LCD_Cmd@cmd,c
   732                           
   733                           ;./LCD_MODULE.h: 48: void LCD_Cmd(char cmd);./LCD_MODULE.h: 49: {;./LCD_MODULE.h: 51:  R
      +                          D1 = 0;
   734  0007A6  9283               	bcf	3971,1,c	;volatile
   735                           
   736                           ;./LCD_MODULE.h: 54:  LCD_Set_Pins(cmd);
   737  0007A8  5003               	movf	LCD_Cmd@cmd,w,c
   738  0007AA  ECBC  F003         	call	_LCD_Set_Pins
   739                           
   740                           ;./LCD_MODULE.h: 57:  RD0 = 1;
   741  0007AE  8083               	bsf	3971,0,c	;volatile
   742                           
   743                           ;./LCD_MODULE.h: 60:     _delay((unsigned long)((4)*(8000000/4000.0)));
   744  0007B0  0E0B               	movlw	11
   745  0007B2  6E02               	movwf	??_LCD_Cmd& (0+255),c
   746  0007B4  0E62               	movlw	98
   747  0007B6                     u147:
   748  0007B6  2EE8               	decfsz	wreg,f,c
   749  0007B8  D7FE               	bra	u147
   750  0007BA  2E02               	decfsz	??_LCD_Cmd& (0+255),f,c
   751  0007BC  D7FC               	bra	u147
   752  0007BE  D000               	nop2	
   753                           
   754                           ;./LCD_MODULE.h: 63:     RD0 = 0;
   755  0007C0  9083               	bcf	3971,0,c	;volatile
   756  0007C2  0012               	return		;funcret
   757  0007C4                     __end_of_LCD_Cmd:
   758                           	opt callstack 0
   759                           
   760 ;; *************** function _LCD_Set_Pins *****************
   761 ;; Defined at:
   762 ;;		line 16 in file "./LCD_MODULE.h"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  lower_nibble    1    wreg     unsigned char 
   765 ;; Auto vars:     Size  Location     Type
   766 ;;  lower_nibble    1    0[COMRAM] unsigned char 
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   776 ;;      Params:         0       0       0       0       0       0       0
   777 ;;      Locals:         1       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0
   779 ;;      Totals:         1       0       0       0       0       0       0
   780 ;;Total ram usage:        1 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_LCD_Cmd
   786 ;;		_Lcd_Init
   787 ;;		_Lcd_Write_Char
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text7
   792  000778                     __ptext7:
   793                           	opt callstack 0
   794  000778                     _LCD_Set_Pins:
   795                           	opt callstack 28
   796                           
   797                           ;incstack = 0
   798                           ;LCD_Set_Pins@lower_nibble stored from wreg
   799  000778  6E01               	movwf	LCD_Set_Pins@lower_nibble,c
   800                           
   801                           ;./LCD_MODULE.h: 16: void LCD_Set_Pins(char lower_nibble);./LCD_MODULE.h: 17: {;./LCD_MO
      +                          DULE.h: 19:  if(lower_nibble & 1)
   802  00077A  A001               	btfss	LCD_Set_Pins@lower_nibble,0,c
   803  00077C  D002               	goto	l19
   804                           
   805                           ;./LCD_MODULE.h: 20:   RD2 = 1;
   806  00077E  8483               	bsf	3971,2,c	;volatile
   807  000780  D001               	goto	l744
   808  000782                     l19:
   809                           
   810                           ;./LCD_MODULE.h: 22:   RD2 = 0;
   811  000782  9483               	bcf	3971,2,c	;volatile
   812  000784                     l744:
   813                           
   814                           ;./LCD_MODULE.h: 24:  if(lower_nibble & 2)
   815  000784  A201               	btfss	LCD_Set_Pins@lower_nibble,1,c
   816  000786  D002               	goto	l21
   817                           
   818                           ;./LCD_MODULE.h: 25:   RD3 = 1;
   819  000788  8683               	bsf	3971,3,c	;volatile
   820  00078A  D001               	goto	l748
   821  00078C                     l21:
   822                           
   823                           ;./LCD_MODULE.h: 27:   RD3 = 0;
   824  00078C  9683               	bcf	3971,3,c	;volatile
   825  00078E                     l748:
   826                           
   827                           ;./LCD_MODULE.h: 29:  if(lower_nibble & 4)
   828  00078E  A401               	btfss	LCD_Set_Pins@lower_nibble,2,c
   829  000790  D002               	goto	l23
   830                           
   831                           ;./LCD_MODULE.h: 30:   RD4 = 1;
   832  000792  8883               	bsf	3971,4,c	;volatile
   833  000794  D001               	goto	l752
   834  000796                     l23:
   835                           
   836                           ;./LCD_MODULE.h: 32:   RD4 = 0;
   837  000796  9883               	bcf	3971,4,c	;volatile
   838  000798                     l752:
   839                           
   840                           ;./LCD_MODULE.h: 34:  if(lower_nibble & 8)
   841  000798  A601               	btfss	LCD_Set_Pins@lower_nibble,3,c
   842  00079A  D002               	goto	l25
   843                           
   844                           ;./LCD_MODULE.h: 35:   RD5 = 1;
   845  00079C  8A83               	bsf	3971,5,c	;volatile
   846  00079E  0012               	return	
   847  0007A0                     l25:
   848                           
   849                           ;./LCD_MODULE.h: 37:   RD5 = 0;
   850  0007A0  9A83               	bcf	3971,5,c	;volatile
   851  0007A2  0012               	return		;funcret
   852  0007A4                     __end_of_LCD_Set_Pins:
   853                           	opt callstack 0
   854                           
   855                           	psect	rparam
   856  0000                     tosu	equ	0xFFF
   857                           tosh	equ	0xFFE
   858                           tosl	equ	0xFFD
   859                           stkptr	equ	0xFFC
   860                           pclatu	equ	0xFFB
   861                           pclath	equ	0xFFA
   862                           pcl	equ	0xFF9
   863                           tblptru	equ	0xFF8
   864                           tblptrh	equ	0xFF7
   865                           tblptrl	equ	0xFF6
   866                           tablat	equ	0xFF5
   867                           prodh	equ	0xFF4
   868                           prodl	equ	0xFF3
   869                           indf0	equ	0xFEF
   870                           postinc0	equ	0xFEE
   871                           postdec0	equ	0xFED
   872                           preinc0	equ	0xFEC
   873                           plusw0	equ	0xFEB
   874                           fsr0h	equ	0xFEA
   875                           fsr0l	equ	0xFE9
   876                           wreg	equ	0xFE8
   877                           indf1	equ	0xFE7
   878                           postinc1	equ	0xFE6
   879                           postdec1	equ	0xFE5
   880                           preinc1	equ	0xFE4
   881                           plusw1	equ	0xFE3
   882                           fsr1h	equ	0xFE2
   883                           fsr1l	equ	0xFE1
   884                           bsr	equ	0xFE0
   885                           indf2	equ	0xFDF
   886                           postinc2	equ	0xFDE
   887                           postdec2	equ	0xFDD
   888                           preinc2	equ	0xFDC
   889                           plusw2	equ	0xFDB
   890                           fsr2h	equ	0xFDA
   891                           fsr2l	equ	0xFD9
   892                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     10      10
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Lcd_Write_String@string	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_LCD_Set_Pins
    _Lcd_Set_Cursor->_LCD_Cmd
    _Lcd_Init->_LCD_Cmd
    _Lcd_Clear->_LCD_Cmd
    _LCD_Cmd->_LCD_Set_Pins

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     957
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     362
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                       _LCD_Set_Pins
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     385
                                              3 COMRAM     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _LCD_Cmd
                       _LCD_Set_Pins
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                       _LCD_Set_Pins
 ---------------------------------------------------------------------------------
 (3) _LCD_Set_Pins                                         1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _LCD_Cmd
       _LCD_Set_Pins
   _Lcd_Init
     _LCD_Cmd
       _LCD_Set_Pins
     _LCD_Set_Pins
   _Lcd_Set_Cursor
     _LCD_Cmd
       _LCD_Set_Pins
   _Lcd_Write_String
     _Lcd_Write_Char
       _LCD_Set_Pins

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      A       A       1        7.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar  7 17:05:01 2019

                        l21 078C                          l23 0796                          l25 07A0  
                        l19 0782                          l61 0710                          u97 072E  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                         l752 0798  
                       l744 0784                         l748 078E                         l856 0758  
                       l864 0698                         l868 06B8                __CFG_CPB$OFF 000000  
                       _RD0 007C18                         _RD1 007C19                         _RD2 007C1A  
                       _RD3 007C1B                         _RD4 007C1C                         _RD5 007C1D  
                       u107 0740                         u117 0628                         u127 063E  
                       u137 0652                         u147 07B6                __CFG_CPD$OFF 000000  
                       wreg 000FE8             __end_of_LCD_Cmd 07C4                __CFG_LVP$OFF 000000  
              __CFG_WDT$OFF 000000               ?_LCD_Set_Pins 0001                        STR_1 060F  
                      STR_2 0601           ?_Lcd_Write_String 0005                        _main 06D8  
                      start 0000          ??_Lcd_Write_String 0007               __CFG_IESO$OFF 000000  
Lcd_Write_Char@lower_nibble 0003               __CFG_MCLRE$ON 000000                ___param_bank 000000  
                     ?_main 0001     __size_of_Lcd_Set_Cursor 002E                       _TRISD 000F95  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000              ??_LCD_Set_Pins 0001  
                     tablat 000FF5                       status 000FD8              __CFG_PBADEN$ON 000000  
          __end_of_Lcd_Init 068E             __initialization 07C4                __end_of_main 0712  
                    ??_main 000B          __size_of_Lcd_Clear 000E               __activetblptr 000001  
                 ??_LCD_Cmd 0002      Lcd_Set_Cursor@position 0008     __size_of_Lcd_Write_Char 0038  
            __CFG_XINST$OFF 000000              __CFG_STVREN$ON 000000                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0080     __end_of__initialization 07C4           __end_of_Lcd_Clear 07E0  
             ___rparam_used 000001              __pcstackCOMRAM 0001        __end_of_LCD_Set_Pins 07A4  
            _Lcd_Set_Cursor 074A             __CFG_OSC$INTIO7 000000                   ?_Lcd_Init 0001  
Lcd_Write_Char@upper_nibble 0002   __size_of_Lcd_Write_String 004A      __end_of_Lcd_Set_Cursor 0778  
                   _LCD_Cmd 07A4                  ??_Lcd_Init 0004    LCD_Set_Pins@lower_nibble 0001  
            _Lcd_Write_Char 0712      Lcd_Write_String@string 0005                     __Hparam 0000  
                   __Lparam 0000                __psmallconst 0600                     __pcinit 07C4  
                   __ramtop 0600             ?_Lcd_Set_Cursor 0004                     __ptext0 06D8  
                   __ptext1 068E                     __ptext2 0712                     __ptext3 074A  
                   __ptext4 061C                     __ptext5 07D2                     __ptext6 07A4  
                   __ptext7 0778      __end_of_Lcd_Write_Char 074A        end_of_initialization 07C4  
     __size_of_LCD_Set_Pins 002C             ?_Lcd_Write_Char 0001                _LCD_Set_Pins 0778  
         Lcd_Write_String@i 0009                  LCD_Cmd@cmd 0003                   _Lcd_Clear 07D2  
          _Lcd_Write_String 068E         start_initialization 07C4           __size_of_Lcd_Init 0072  
                ?_Lcd_Clear 0001            __CFG_LPT1OSC$OFF 000000                    ?_LCD_Cmd 0001  
         __CFG_CCP2MX$PORTC 000000            ??_Lcd_Set_Cursor 0005                 __smallconst 0600  
Lcd_Set_Cursor@lower_nibble 0007                 ??_Lcd_Clear 0004            __CFG_WDTPS$32768 000000  
          ??_Lcd_Write_Char 0002            __size_of_LCD_Cmd 0020                    _Lcd_Init 061C  
  __end_of_Lcd_Write_String 06D8                    __Hrparam 0000                    __Lrparam 0000  
              __Lsmallconst 0600          __CFG_BOREN$SBORDIS 000000         Lcd_Write_Char@alpha 0004  
             __size_of_main 003A  Lcd_Set_Cursor@upper_nibble 0006           Lcd_Set_Cursor@col 0004  
         Lcd_Set_Cursor@row 0005  
